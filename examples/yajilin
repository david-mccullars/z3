#!/usr/bin/env ruby

require "pathname"
require_relative "../lib/z3"

class Yajilin
  def initialize(path)
    @data = Pathname(path)
      .readlines
      .map{|line|
        line
          .chomp
          .split
          .map{|x| x == "." ? nil : x}
      }
    @xsize = @data.size
    @ysize = @data[0].size
    raise unless @data.all?{|row| row.size == @xsize}
    @solver = Z3::Solver.new
  end

  def on_board?(x,y)
    x >= 0 and y >= 0 and x < @xsize and y < @ysize
  end

  # true = white
  # false = black
  def cvar(x,y)
    return unless on_board?(x,y)
    Z3.Bool("c[#{x},#{y}]")
  end

  # true - connected
  # right from (x,y)
  def hvar(x,y)
    return unless on_board?(x,y) and x != @xsize - 1
    Z3.Bool("h[#{x},#{y}]")
  end

  # true - connected
  # down from (x,y)
  def vvar(x,y)
    return unless on_board?(x,y) and y != @ysize - 1
    Z3.Bool("v[#{x},#{y}]")
  end

  # Every cell has a number that shows its position within the loop
  def nvar(x,y)
    Z3.Int("n[#{x},#{y}]")
  end

  def hint_cell?(x,y)
    !!@data[y][x]
  end

  def neighbours(x,y)
    [
      [x+1, y  ],
      [x-1, y  ],
      [x,   y+1],
      [x,   y-1],
    ].select{|nx,ny|
      on_board?(nx, ny) and !hint_cell?(nx,ny)
    }
  end

  def neighbour_cvars(x,y)
    neighbours(x,y)
      .map{|nx,ny| cvar(nx, ny)}
  end

  def connections_at(x,y)
    [
      hvar(x,y),
      hvar(x-1,y),
      vvar(x,y),
      vvar(x,y-1),
    ].compact
  end

  def count_loops_at(x,y)
    Z3.Add(*connections_at(x,y).map{|n| n.ite(1,0)})
  end

  def assert_connections
    each_xy do |x,y|
      if hint_cell?(x, y)
        @solver.assert count_loops_at(x,y) == 0
      else
        @solver.assert cvar(x,y).implies(count_loops_at(x,y) == 2)
        @solver.assert (~cvar(x,y)).implies(count_loops_at(x,y) == 0)
      end
    end
  end

  def assert_no_black_multiples
    each_xy do |x,y|
      next if hint_cell?(x, y)
      @solver.assert (~cvar(x,y)).implies(Z3.And(*neighbour_cvars(x,y)))
    end
  end

  def stripe_left(x0,y)
    (0...x0).map{|x| cvar(x,y) unless hint_cell?(x,y) }.compact
  end

  def stripe_right(x0,y)
    (x0+1...@xsize).map{|x| cvar(x,y) unless hint_cell?(x,y) }.compact
  end

  def stripe_up(x,y0)
    (0...y0).map{|y| cvar(x,y) unless hint_cell?(x,y) }.compact
  end

  def stripe_down(x,y0)
    (y0+1...@ysize).map{|y| cvar(x,y) unless hint_cell?(x,y) }.compact
  end

  def assert_arrows
    each_xy do |x,y|
      if hint_cell?(x, y)
        count = @data[y][x][0].to_i
        dir = @data[y][x][1]
        case dir
        when "<", "←"
          stripe = stripe_left(x,y)
        when ">", "→"
          stripe = stripe_right(x,y)
        when "^", "↑"
          stripe = stripe_up(x,y)
        when "_", "↓"
          stripe = stripe_down(x,y)
        else
          raise
        end

        @solver.assert Z3.Add(*stripe.map{|c| c.ite(0,1)}) == count
      end
    end
  end

  def each_xy
    @ysize.times do |y|
      @xsize.times do |x|
        yield(x,y)
      end
    end
  end

  def connections_and_nvars(x,y)
    [
      [x+1, y, hvar(x, y)],
      [x-1, y, hvar(x-1, y)],
      [x, y+1, vvar(x, y)],
      [x, y-1, vvar(x, y-1)],
    ].select{|nx,ny,convar|
      on_board?(nx, ny) and !hint_cell?(nx,ny)
    }.map{|nx,ny,convar| [nvar(nx,ny), convar] }
  end

  # Loop will have Ns of 0+, all distinct and consecutive
  # Non-loop will have Ns of MAX + cell_number
  def assert_single_loop
    # max_value = @xsize * @ysize + 10
    max_value = 1000

    each_xy do |x,y|
      cell_idx = x + y * @xsize
      @solver.assert nvar(x,y) >= 0
      if hint_cell?(x,y)
        @solver.assert nvar(x,y) == max_value + cell_idx
      else
        @solver.assert (~cvar(x,y)).implies( nvar(x,y) == max_value + cell_idx )

        nval = connections_and_nvars(x,y)
          .map{|n,c| c.ite(n+1, max_value) }
          .reduce{|a,b| (a <= b).ite(a, b) }

        @solver.assert cvar(x,y).implies((nvar(x,y) == 0) | (nvar(x,y) == nval) )
        @solver.assert cvar(x,y).implies(nvar(x,y) < max_value)
      end
    end

    # TEMPORARY
    @solver.assert nvar(0,0) == 0
    @solver.assert vvar(0,4)
    @solver.assert hvar(4,5)
    @solver.assert hvar(4,2)
    @solver.assert hvar(2,5)
    @solver.assert hvar(3,5)
    @solver.assert hvar(1,9)

    # each_xy do |x,y|
    #   next unless x == 0 and y == 0
    #   @solver.assert nvar(x,y) != 0
    # end

    # @solver.assert Z3.Distinct(
    #   *enum_for(:each_xy).map{|x,y| nvar(x,y)}
    # )
  end

  def call
    assert_connections
    assert_no_black_multiples
    assert_arrows
    assert_single_loop

    if @solver.satisfiable?
      @model = @solver.model
      print_answer
    else
      puts "failed to solve"
    end
  end

  def hint_data(x,y)
    u = @data[y][x]
    n = u[0]
    a = {
      "<" => "←",
      ">" => "→",
      "_" => "↓",
      "^" => "↑",
    }[u[1]] || u[1]
    n + a
  end

  # TODO: make it nicer
  def print_answer
    @ysize.times do |y|
      @xsize.times do |x|
        if hint_cell?(x,y)
          print hint_data(x,y)
          # print "O "
        else
          c = @model[cvar(x,y)].to_b
          if c
            print "* "
          else
            print "# "
          end
        end

        next if x == @xsize - 1
        if @model[hvar(x,y)].to_b
          print "-"
        else
          print " "
        end
      end
      print "\n"

      next if y == @ysize-1
      @xsize.times do |x|
        if @model[vvar(x,y)].to_b
          print "|  "
        else
          print "   "
        end
      end

      print "\n"
    end

    print "\n"
    @ysize.times do |y|
      @xsize.times do |x|
        n = @model[nvar(x,y)].to_i
        print "%8d" % n
      end
      print "\n"
    end
  end
end

path = ARGV[0] || Pathname(__dir__) + "yajilin-1.txt"
Yajilin.new(path).call
