#!/usr/bin/env ruby

# NOTE: This solver can fill empty spaces with phantom loops,
#       so it's not technically totally legit true
# As in:
#  A..
#  A..
#
#  Into:
#  A* A→ A↓
#  A↑ A↑ A←
#
# Instead of more correct:
#
#  A* A← A←
#  A→ A→ A↑
#
# This affects few enough real world puzzles and would complicate solution enough
# that I let it be.

require "pathname"
require_relative "../lib/z3"

class LetterConnections
  def initialize(path)
    data = Pathname(path).read
    data = data.strip.split("\n")
    @xsize = data[0].size
    @ysize = data.size
    @letters  = {}
    @rletters = {}
    @starts   = {}
    @ends     = {}
    @special_ends = {}
    @special_starts = {}

    data = map_coordinates{|x,y| data[y][x]}

    data.sort.each do |(x,y), letter|
      next if letter == "."
      if @letters.has_key?(letter)
        if @ends.has_key?(letter)
          raise "Letter #{letter} occurs more than twice"
        end
        @ends[letter] = [x,y]
        @special_ends[[x,y]] = letter
      else
        i = @letters.size
        @letters[letter] = i
        @rletters[i] = letter
        @starts[letter] = [x,y]
        @special_starts[[x,y]] = letter
      end
    end
    @letters.each_key do |letter|
      unless @ends.has_key?(letter)
        raise "Letter #{letter} occurs only once"
      end
    end

    @solver = Z3::Solver.new
  end

  def call
    @line = map_coordinates{|x,y| line_var(x,y) }
    @dir  = map_coordinates{|x,y| dir_var(x,y) }

    @letters.each do |letter, i|
      @solver.assert @line[@starts[letter]] == i
      @solver.assert @line[@ends[letter]] == i
    end

    (0...@ysize).each do |y|
      (0...@xsize).each do |x|
        next if @special_ends.has_key?([x,y])
        # Direction Left
        if x == 0
          @solver.assert @dir[[x,y]] != 0
        else
          @solver.assert Z3.Implies(@dir[[x,y]] == 0, @line[[x,y]] == @line[[x-1,y]])
          @solver.assert Z3.Implies(@dir[[x,y]] == 0, @dir[[x-1,y]] != 2)
        end
        # Direction Up
        if y == 0
          @solver.assert @dir[[x,y]] != 1
        else
          @solver.assert Z3.Implies(@dir[[x,y]] == 1, @line[[x,y]] == @line[[x,y-1]])
          @solver.assert Z3.Implies(@dir[[x,y]] == 1, @dir[[x,y-1]] != 3)
        end
        # Direction Right
        if x == @xsize - 1
          @solver.assert @dir[[x,y]] != 2
        else
          @solver.assert Z3.Implies(@dir[[x,y]] == 2, @line[[x,y]] == @line[[x+1,y]])
          @solver.assert Z3.Implies(@dir[[x,y]] == 2, @dir[[x+1,y]] != 0)
        end
        # Direction Down
        if y == @ysize - 1
          @solver.assert @dir[[x,y]] != 3
        else
          @solver.assert Z3.Implies(@dir[[x,y]] == 3, @line[[x,y]] == @line[[x,y+1]])
          @solver.assert Z3.Implies(@dir[[x,y]] == 3, @dir[[x,y+1]] != 1)
        end
      end
    end

    # Everything except start node has one incoming arrow
    # End nodes not counted for this

    (0...@ysize).each do |y|
      (0...@xsize).each do |x|
        next if @special_starts.has_key?([x,y])
        potential_incoming = potential_incoming(x,y)
        condition_exactly_one(
          potential_incoming.map{|i,j,d| @dir[[i,j]] == d}
        )
      end
    end
    if @solver.satisfiable?
      @model = @solver.model
      print_answer!
    else
      puts "failed to solve"
    end
  end

  private

  def map_coordinates
    Hash[(0...@xsize).to_a.product((0...@ysize).to_a).map{|x,y| [[x,y],yield(x,y)]}]
  end

  def line_var(x, y)
    v = Z3.Int("l#{x},#{y}")
    @solver.assert v >= 0
    @solver.assert v < @letters.size
    v
  end

  def dir_var(x, y)
    v = Z3.Int("d#{x},#{y}")
    @solver.assert v >= 0
    @solver.assert v <= 3
    v
  end

  def potential_incoming(x0, y0)
    [
      [x0+1,y0,0],
      [x0-1,y0,2],
      [x0,y0+1,1],
      [x0,y0-1,3],
    ].select do |x,y,d|
      @dir.has_key?([x,y]) and not @special_ends.has_key?([x,y])
    end
  end

  # Surely Z3 must have a thing for it
  def condition_exactly_one(conds)
    @solver.assert Z3.Or(*conds)
    (0...conds.size).each do |ci|
      (0...conds.size).each do |cj|
        if ci < cj
          @solver.assert ~conds[ci] | ~conds[cj]
        end
      end
    end
  end

  def print_answer!
    (0...@ysize).each do |y|
      (0...@xsize).each do |x|
        li = @model[@line[[x,y]]].to_i
        l = @rletters[li]
        d = @model[@dir[[x,y]]].to_i
        if [x,y] == @starts[l]
          print("\u2190\u2191\u2192\u2193"[d]+l+" ")
        elsif [x,y] == @ends[l]
          print("*"+l+" ")
        else
          print("\u2190\u2191\u2192\u2193"[d]+l.downcase+" ")
        end
      end
      puts ""
    end
  end
end

path = ARGV[0] || Pathname(__dir__) + "letter_connections-1.txt"
LetterConnections.new(path).call
