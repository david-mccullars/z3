#!/usr/bin/env ruby

require "pathname"
require "set"
require_relative "../lib/z3"

# https://www.janko.at/Raetsel/Dominion/index.htm

class Dominion
  def initialize(path)
    @data = Pathname(path).readlines.map(&:chomp)
    @ysize = @data.size
    @xsize = @data[0].size
    raise unless @data.all?{|line| line.size == @xsize}
    @vars = (@data.flat_map(&:chars).uniq - ["."]).sort.map.with_index{|v,c| [v,c+1]}.to_h
    @areas_count = @vars.size
    @solver = Z3::Solver.new
  end

  def on_board?(x,y)
    x >= 0 and y >= 0 and x < @xsize and y < @ysize
  end

  def given(x,y)
    return unless on_board?(x,y)
    @vars[@data[y][x]] || nil
  end

  def var(x,y)
    return unless on_board?(x,y)
    Z3.Int("c[#{x},#{y}]")
  end

  def dvar(x,y)
    return unless on_board?(x,y)
    Z3.Int("d[#{x},#{y}]")
  end

  def domino?(x,y)
    var(x,y) == 0
  end

  def neighbours(x,y)
    [
      [x-1,y],
      [x+1,y],
      [x,y-1],
      [x,y+1],
    ].select{|nx,ny| on_board?(nx,ny)}
  end

  def count_neighbour_dominoes(x,y)
    Z3.Add(*neighbours(x,y).map{|x,y| domino?(x,y).ite(1,0) })
  end

  def assign_primary
    seen = Set[]
    @primary = Set[]
    each_xy do |x,y|
      g = given(x,y)
      next unless g
      next if seen.include?(g)
      @primary << [x,y]
      seen << g
    end
  end

  def primary?(x,y)
    @primary.include?([x,y])
  end

  def each_xy
    @ysize.times do |y|
      @ysize.times do |x|
        yield(x,y)
      end
    end
  end

  def assert_cells_are_assigned_to_areas
    each_xy do |x,y|
      @solver.assert var(x,y) >= 0
      @solver.assert var(x,y) <= @areas_count
      g = given(x,y)
      if g
        @solver.assert var(x,y) == g
      end
    end
  end

  def assert_dominos
    each_xy do |x,y|
      @solver.assert(
        domino?(x,y).implies(count_neighbour_dominoes(x,y) == 1)
      )
    end
  end

  def assert_areas_separated
    each_xy do |x,y|
      v = var(x,y)
      neighbours(x,y).each do |nx,ny|
        n = var(nx,ny)
        @solver.assert Z3.Or(n == 0, v == 0, n == v)
      end
    end
  end

  def assert_each_area_connected
    # Just some bogus big value
    max_value = @xsize * @ysize + 10
    each_xy do |x,y|
      @solver.assert dvar(x,y) >= 0
      @solver.assert dvar(x,y) < max_value

      next_ds_same_area = neighbours(x,y).map{|nx,ny| (var(nx,ny) == var(x,y)).ite(dvar(nx,ny) + 1, max_value) }
      next_d = next_ds_same_area.reduce{|a,b| (a <= b).ite(a, b) }
      @solver.assert(
        dvar(x,y) == Z3.Or(primary?(x,y), domino?(x,y)).ite(0, next_d)
      )
    end
  end

  def call
    assign_primary

    assert_cells_are_assigned_to_areas
    assert_dominos
    assert_areas_separated

    assert_each_area_connected

    if @solver.satisfiable?
      @model = @solver.model
      print_solution
    else
      puts "There is no solution"
    end
  end

  def print_solution
    @ysize.times do |y|
      @ysize.times do |x|
        c = @model[var(x,y)].to_i
        print @vars.invert[c] || "*"
      end
      print "\n"
    end
  end
end

path = ARGV[0] || Pathname(__dir__) + "dominion-1.txt"
Dominion.new(path).call
