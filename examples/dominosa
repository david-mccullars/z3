#!/usr/bin/env ruby

require "pathname"
require_relative "../lib/z3"

class Dominosa
  def initialize(path)
    @data = Pathname(path).readlines.map{|line| line.split.map(&:to_i)}
    @solver = Z3::Solver.new
    @ysize = @data.size
    @xsize = @data[0].size
  end

  def connect_var(x1,y1,x2,y2)
    Z3.Bool("#{x1},#{y1}-#{x2},#{y2}")
  end

  def valid?(x,y)
    return false if x < 0 or y < 0
    return false if x >= @xsize or y >= @ysize
    true
  end

  def down_var(x,y)
    return unless valid?(x,y+1)
    connect_var(x,y,x,y+1)
  end

  def up_var(x,y)
    return unless valid?(x,y-1)
    connect_var(x,y-1,x,y)
  end

  def right_var(x,y)
    return unless valid?(x+1,y)
    connect_var(x,y,x+1,y)
  end

  def left_var(x,y)
    return unless valid?(x-1,y)
    connect_var(x-1,y,x,y)
  end

  def each_x
    @xsize.times do |x|
      yield(x, x == @xsize - 1)
    end
  end

  def each_y
    @ysize.times do |y|
      yield(y, y == @ysize - 1)
    end
  end

  def assert_no_duplicate_connections
    all = Hash.new{|ht,k| ht[k] = []}

    each_y do |y, last_y|
      each_x do |x, last_x|
        unless last_x
          c = right_var(x,y)
          v = [@data[y][x], @data[y][x+1]].sort
          all[v] << c
        end

        unless last_y
          c = down_var(x,y)
          v = [@data[y][x], @data[y+1][x]].sort
          all[v] << c
        end
      end
    end

    all.each do |_, vars|
      @solver.assert Z3.Add(*vars.map{|v| v.ite(1,0) }) == 1
    end
  end

  def assert_solution_made_of_dominoes
    @ysize.times do |y|
      @xsize.times do |x|
        vars = [
          down_var(x,y),
          right_var(x,y),
          left_var(x,y),
          up_var(x,y),
        ].compact
        @solver.assert Z3.Add(*vars.map{|v| v.ite(1,0) }) == 1
      end
    end
  end

  def call
    assert_no_duplicate_connections
    assert_solution_made_of_dominoes

    if @solver.satisfiable?
      @model = @solver.model
      print_solution
    else
      puts "There is no solution"
    end
  end

  private

  def print_connection(var)
    c = @model[var].to_b
    print c ? "*" : " "
  end

  def print_solution
    each_y do |y, last_y|
      each_x do |x, last_x|
        print @data[y][x]
        print_connection right_var(x,y) unless last_x
      end
      print "\n"

      unless last_y
        each_x do |x, last_x|
          print_connection down_var(x,y)
          print " " unless last_x
        end
        print "\n"
      end
    end
  end
end

path = ARGV[0] || Pathname(__dir__) + "dominosa-1.txt"
Dominosa.new(path).call
