#!/usr/bin/env ruby

require_relative "../lib/z3"
require "pathname"
require_relative "simple_regexp_parser"
require_relative "regexp_string_matcher"

class RegexpCrosswordSolver
  def initialize(path)
    data = Pathname(path).read
    data = data.strip.split("\n")
    col_number = data.index("")
    row_number = data.size - col_number - 1
    # left to right
    @cols = data.first(col_number)
    # top to bottom
    @rows = data.last(row_number)
    @solver = Z3::Solver.new
    @xsize = @cols.size
    @ysize = @rows.size
  end

  def setup_cell(x,y)
    v = Z3.Int("cell#{x},#{y}")
    @solver.assert v >= 0
    @solver.assert v <= 127
    v
  end

  def col_str(x)
    (0...@ysize).map{|y| @crossword[[x,y]]}
  end

  def row_str(y)
    (0...@xsize).map{|x| @crossword[[x,y]]}
  end

  def col_rx(x)
    SimpleRegexpParser.new(@cols[x], "col-#{x}").parse
  end

  def row_rx(y)
    SimpleRegexpParser.new(@rows[y], "row-#{y}").parse
  end

  def call
    @crossword = {}
    @xsize.times do |x|
      @ysize.times do |y|
        @crossword[[x,y]] = setup_cell(x,y)
      end
    end

    @xsize.times do |x|
      RegexpStringMatcher.new(@solver, col_rx(x), col_str(x), "col-#{x}").run!
    end
    @ysize.times do |y|
      RegexpStringMatcher.new(@solver, row_rx(y), row_str(y), "row-#{y}").run!
    end

    print_answer
  end

  def print_answer
    while @solver.satisfiable?
      @model = @solver.model
      @ysize.times do |y|
        puts @xsize.times.map{|x|
          @model[@crossword[[x,y]]].to_i.chr
        }.join.inspect[1...-1]
      end
      break # If you want more solutions...
      puts ""
      @solver.assert Z3.Or(*@crossword.values.map{|v| @model[v] != v})
    end
  end
end

path = ARGV[0] || Pathname(__dir__) + "regexp_crossword/tutorial-1.txt"
RegexpCrosswordSolver.new(path).call
