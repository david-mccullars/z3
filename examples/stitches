#!/usr/bin/env ruby

require "pathname"
require_relative "../lib/z3"
require "paint"

class StitchesSolver
  def initialize(path)
    data = Pathname(path).read
    data = data.strip.split("\n").map do |line|
      line.split
    end
    @col_counts = data.shift.map(&:to_i)
    @row_counts = data.map(&:shift).map(&:to_i)
    @xsize = @col_counts.size
    @ysize = @row_counts.size
    @data = data
    raise unless data.size == @ysize
    raise unless data.all?{|r| r.size == @ysize}
    raise unless @col_counts.sum == @row_counts.sum
    @solver = Z3::Solver.new
    @groups = @data.flatten.uniq
  end

  def solve!
    assign_colors!
    setup_cell_vars!
    setup_stitch_vars!

    setup_cell_assertions!
    setup_stitch_assertions!
    setup_cell_stitch_assertions!

    if @solver.satisfiable?
      @model = @solver.model
      print_answer!
    else
      puts "failed to solve"
    end
  end

  def assign_colors!
    @fg = @groups.to_h{|g| [g, [rand(256),rand(256),rand(256)]] }
    @bg = @groups.to_h{|g| [g, [rand(256),rand(256),rand(256)]] }
  end

  def setup_cell_vars!
    @cell_vars = {}
    @xsize.times do |x|
      @ysize.times do |y|
        v = Z3.Bool("c#{x},#{y}")
        @cell_vars[[x,y]] = v
      end
    end
  end

  def row_of_cell_vars(y)
    @xsize.times.map{|x| @cell_vars[[x,y]].ite(1,0) }
  end

  def col_of_cell_vars(x)
    @ysize.times.map{|y| @cell_vars[[x,y]].ite(1,0) }
  end

  def setup_cell_assertions!
    @xsize.times do |x|
      @solver.assert Z3.Add(*col_of_cell_vars(x)) == @col_counts[x]
    end

    @ysize.times do |y|
      @solver.assert Z3.Add(*row_of_cell_vars(y)) == @row_counts[y]
    end
  end

  def setup_stitch_vars!
    @hstitch = {}
    @vstitch = {}
    @stitch_groups = {}

    (@xsize-1).times do |x|
      @ysize.times do |y|
        v = Z3.Bool("h#{x},#{y}")
        g1 = @data[y][x]
        g2 = @data[y][x+1]
        pair = [g1,g2].sort.uniq
        next if pair.size == 1
        @stitch_groups[pair] ||= []
        @stitch_groups[pair] << v
        @hstitch[[x,y]] = v
      end
    end

    @xsize.times do |x|
      (@ysize-1).times do |y|
        v = Z3.Bool("v#{x},#{y}")
        g1 = @data[y][x]
        g2 = @data[y+1][x]
        pair = [g1,g2].sort.uniq
        next if pair.size == 1
        @stitch_groups[pair] ||= []
        @stitch_groups[pair] << v
        @vstitch[[x,y]] = v
      end
    end

    group_count = (2 * @stitch_groups.keys.size)
    raise unless @col_counts.sum % group_count == 0
    @stitch_count = @col_counts.sum / group_count
  end

  def setup_stitch_assertions!
    @stitch_groups.each do |g, vars|
      @solver.assert Z3.Add(*vars.map{|v| v.ite(1,0)}) == @stitch_count
    end
  end

  def setup_cell_stitch_assertions!
    @xsize.times do |x|
      @ysize.times do |y|
        vars = [
          @hstitch[[x,y]],
          @hstitch[[x-1,y]],
          @vstitch[[x,y]],
          @vstitch[[x,y-1]],
        ].compact.map{|v| v.ite(1,0)}
        if vars.empty?
          @solver.assert !@cell_vars[[x,y]]
        else
          @solver.assert @cell_vars[[x,y]].ite(1,0) == Z3.Add(*vars)
        end
      end
    end
  end

  def group_at(x,y)
    return nil if x < 0 or y < 0
    return nil if x >= @xsize or y >= @ysize
    @data[y][x]
  end

  def paint_for(s,x1,y1,x2=x1,y2=y1)
    g1 = group_at(x1,y1)
    g2 = group_at(x2,y2)
    if g1 == g2
      Paint[s, @fg[g1], @bg[g1]]
    else
      s
    end
  end

  def print_answer!
    @ysize.times do |y|
      @xsize.times do |x|
        s = @model[@cell_vars[[x,y]]].to_b ? "*" : " "
        print paint_for(s, x, y)
        if @hstitch[[x,y]]
          hs = @model[@hstitch[[x,y]]].to_b ? "-" : " "
        else
          hs = " "
        end
        print paint_for(hs, x, y, x+1, y)
      end
      print "\n"
      next if y == @ysize - 1
      @xsize.times do |x|
        if @vstitch[[x,y]]
          vs = @model[@vstitch[[x,y]]].to_b ? "|" : " "
        else
          vs = " "
        end
        print paint_for(vs, x, y, x,   y+1)
        print paint_for(" ", x, y, x+1, y+1)
      end
      print "\n"
    end
  end
end



path = ARGV[0] || Pathname(__dir__) + "stitches-1.txt"
StitchesSolver.new(path).solve!
