#!/usr/bin/env ruby

require "pathname"
require_relative "../lib/z3"

class StarBattle
  def initialize(path)
    @data = Pathname(path).readlines.map(&:chomp).map(&:split)
    @size = @data.size
    raise unless @data.all?{|row| row.size == @size}
    raise unless containers.size == @size
    @solver = Z3::Solver.new
  end

  def call
    # Each row contains 2 stars
    @size.times do |y|
      sum = Z3.Add(*@size.times.map{|x| cell_var(x, y).ite(1, 0) })
      @solver.assert sum == 2
    end

    # Each column contains 2 stars
    @size.times do |x|
      sum = Z3.Add(*@size.times.map{|y| cell_var(x, y).ite(1, 0) })
      @solver.assert sum == 2
    end

    # Each container contains 2 stars
    coords.group_by{|x,y| container_at(x,y) }.each do |name, cells|
      sum = Z3.Add(*cells.map{|x,y| cell_var(x, y).ite(1, 0) })
      @solver.assert sum == 2
    end

    # Can't be adjacent
    coords.each do |x, y|
      @solver.assert cell_var(x, y).implies !cell_var(x+1, y)
      @solver.assert cell_var(x, y).implies !cell_var(x-1, y+1)
      @solver.assert cell_var(x, y).implies !cell_var(x,   y+1)
      @solver.assert cell_var(x, y).implies !cell_var(x+1, y+1)
    end

    if @solver.satisfiable?
      @model = @solver.model
      print_answer
    else
      puts "failed to solve"
    end
  end

  private

  def coords
    @size.times.flat_map do |y|
      @size.times.map do |x|
        [x,y]
      end
    end
  end

  def containers
    @containers ||= @data.flatten.uniq.sort
  end

  def cell_var(x, y)
    return nil unless (0...@size).include?(x)
    return nil unless (0...@size).include?(y)
    Z3.Bool("c#{x},#{y}")
  end

  def container_at(x, y)
    return nil unless (0...@size).include?(x)
    return nil unless (0...@size).include?(y)
    @data[y][x]
  end

  def print_corner(x, y)
    if [
        container_at(x, y),
        container_at(x, y-1),
        container_at(x-1, y),
        container_at(x-1, y-1),
      ].uniq.size == 1
      print " "
    else
      print "+"
    end
  end

  def print_vertical(x, y)
    if x == 0 or container_at(x, y) != container_at(x-1, y)
      print "|"
    else
      print " "
    end
  end

  def print_horizontal(x, y)
    if y == 0 or container_at(x, y) != container_at(x, y-1)
      print "-"
    else
      print " "
    end
  end

  def print_cell(x, y)
      if @model[cell_var(x, y)].to_b
      print "*"
    else
      print " "
    end
  end

  def print_answer
    (0..@size).each do |y|
      (0..@size).each do |x|
        print_corner x, y
        next if x == @size
        print_horizontal x, y
      end
      print "\n"

      next if y == @size
      (0..@size).each do |x|
        print_vertical x, y
        next if x == @size
        print_cell x, y
      end
      print "\n"
    end
  end
end

path = ARGV[0] || Pathname(__dir__) + "star_battle-1.txt"
StarBattle.new(path).call
